/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, StatisticEvent as PrismaStatisticEvent } from "@prisma/client";

export class StatisticEventServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StatisticEventCountArgs, "select">
  ): Promise<number> {
    return this.prisma.statisticEvent.count(args);
  }

  async statisticEvents(
    args: Prisma.StatisticEventFindManyArgs
  ): Promise<PrismaStatisticEvent[]> {
    return this.prisma.statisticEvent.findMany(args);
  }
  async statisticEvent(
    args: Prisma.StatisticEventFindUniqueArgs
  ): Promise<PrismaStatisticEvent | null> {
    return this.prisma.statisticEvent.findUnique(args);
  }
  async createStatisticEvent(
    args: Prisma.StatisticEventCreateArgs
  ): Promise<PrismaStatisticEvent> {
    return this.prisma.statisticEvent.create(args);
  }
  async updateStatisticEvent(
    args: Prisma.StatisticEventUpdateArgs
  ): Promise<PrismaStatisticEvent> {
    return this.prisma.statisticEvent.update(args);
  }
  async deleteStatisticEvent(
    args: Prisma.StatisticEventDeleteArgs
  ): Promise<PrismaStatisticEvent> {
    return this.prisma.statisticEvent.delete(args);
  }
}
