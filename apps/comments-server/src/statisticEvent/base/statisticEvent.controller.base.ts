/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StatisticEventService } from "../statisticEvent.service";
import { StatisticEventCreateInput } from "./StatisticEventCreateInput";
import { StatisticEvent } from "./StatisticEvent";
import { StatisticEventFindManyArgs } from "./StatisticEventFindManyArgs";
import { StatisticEventWhereUniqueInput } from "./StatisticEventWhereUniqueInput";
import { StatisticEventUpdateInput } from "./StatisticEventUpdateInput";

export class StatisticEventControllerBase {
  constructor(protected readonly service: StatisticEventService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StatisticEvent })
  async createStatisticEvent(
    @common.Body() data: StatisticEventCreateInput
  ): Promise<StatisticEvent> {
    return await this.service.createStatisticEvent({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        eventType: true,
        timestamp: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StatisticEvent] })
  @ApiNestedQuery(StatisticEventFindManyArgs)
  async statisticEvents(
    @common.Req() request: Request
  ): Promise<StatisticEvent[]> {
    const args = plainToClass(StatisticEventFindManyArgs, request.query);
    return this.service.statisticEvents({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        eventType: true,
        timestamp: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StatisticEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async statisticEvent(
    @common.Param() params: StatisticEventWhereUniqueInput
  ): Promise<StatisticEvent | null> {
    const result = await this.service.statisticEvent({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        eventType: true,
        timestamp: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StatisticEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStatisticEvent(
    @common.Param() params: StatisticEventWhereUniqueInput,
    @common.Body() data: StatisticEventUpdateInput
  ): Promise<StatisticEvent | null> {
    try {
      return await this.service.updateStatisticEvent({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          eventType: true,
          timestamp: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StatisticEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStatisticEvent(
    @common.Param() params: StatisticEventWhereUniqueInput
  ): Promise<StatisticEvent | null> {
    try {
      return await this.service.deleteStatisticEvent({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          eventType: true,
          timestamp: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
