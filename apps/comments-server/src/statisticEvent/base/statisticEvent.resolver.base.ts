/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StatisticEvent } from "./StatisticEvent";
import { StatisticEventCountArgs } from "./StatisticEventCountArgs";
import { StatisticEventFindManyArgs } from "./StatisticEventFindManyArgs";
import { StatisticEventFindUniqueArgs } from "./StatisticEventFindUniqueArgs";
import { CreateStatisticEventArgs } from "./CreateStatisticEventArgs";
import { UpdateStatisticEventArgs } from "./UpdateStatisticEventArgs";
import { DeleteStatisticEventArgs } from "./DeleteStatisticEventArgs";
import { StatisticEventService } from "../statisticEvent.service";
@graphql.Resolver(() => StatisticEvent)
export class StatisticEventResolverBase {
  constructor(protected readonly service: StatisticEventService) {}

  async _statisticEventsMeta(
    @graphql.Args() args: StatisticEventCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StatisticEvent])
  async statisticEvents(
    @graphql.Args() args: StatisticEventFindManyArgs
  ): Promise<StatisticEvent[]> {
    return this.service.statisticEvents(args);
  }

  @graphql.Query(() => StatisticEvent, { nullable: true })
  async statisticEvent(
    @graphql.Args() args: StatisticEventFindUniqueArgs
  ): Promise<StatisticEvent | null> {
    const result = await this.service.statisticEvent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StatisticEvent)
  async createStatisticEvent(
    @graphql.Args() args: CreateStatisticEventArgs
  ): Promise<StatisticEvent> {
    return await this.service.createStatisticEvent({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => StatisticEvent)
  async updateStatisticEvent(
    @graphql.Args() args: UpdateStatisticEventArgs
  ): Promise<StatisticEvent | null> {
    try {
      return await this.service.updateStatisticEvent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StatisticEvent)
  async deleteStatisticEvent(
    @graphql.Args() args: DeleteStatisticEventArgs
  ): Promise<StatisticEvent | null> {
    try {
      return await this.service.deleteStatisticEvent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
